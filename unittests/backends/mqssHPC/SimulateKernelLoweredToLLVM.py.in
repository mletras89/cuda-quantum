#!/usr/bin/env python

import cudaq
import argparse
from optparse import OptionParser
import uvicorn, uuid, base64, ctypes
import random
import sys
from llvmlite import binding as llvm

llvm.initialize()
llvm.initialize_native_target()
llvm.initialize_native_asmprinter()
target = llvm.Target.from_default_triple()
targetMachine = target.create_target_machine()
backing_mod = llvm.parse_assembly("")
engine = llvm.create_mcjit_compiler(backing_mod, targetMachine)

def getKernelFunction(module):
    for f in module.functions:
        if not f.is_declaration:
            return f
    return None

def getNumRequiredQubits(function):
    for a in function.attributes:
        if "requiredQubits" in str(a):
            return int(
                str(a).split("requiredQubits\"=")[-1].split(" ")[0].replace(
                    "\"", ""))

if __name__ == '__main__':
  help='''usage: %prog [options]", version=1.0'''
  parser = OptionParser(usage=help)

  parser.add_option("-c", "--circuit",type="string", help="input QIR circuit to be simulated!")
  parser.add_option("-o", "--output", type="string", help="output file <OUTPUT>")
  parser.add_option("-s", "--shots",  type="string", help="number of shots to simulate the circut...")
  (options,ARGS) = parser.parse_args()

  if not options.circuit:
    print("%s: missing --circuit option!" % parser.get_prog_name(), file=sys.stderr)
    parser.parse_args(["-h"])
    exit(-1)

  if not options.output:
    print("%s: missing --output option!" % parser.get_prog_name(), file=sys.stderr)
    parser.parse_args(["-h"])
    exit(-1)

  # Open the file in read mode
  with open(options.circuit, "r") as file:
    # Read the entire file content into a string
    program = file.read()

  # Now, file_content contains the entire content of the file as a string
  #print(program)

  m = llvm.module.parse_assembly(program)
  mstr = str(m)
  #print("MSTR")
  #print(mstr)
  assert ('entry_point' in mstr)
  
  function = getKernelFunction(m)
  if function == None:
    raise Exception("Could not find kernel function")
  
  numQubitsRequired = getNumRequiredQubits(function)
  kernelFunctionName = function.name

  #print("Kernel name = ", kernelFunctionName)
  #print("Requires {} qubits".format(numQubitsRequired))
  #print("Circuit:\n")
  #print(mstr)

  # JIT Compile and get Function Pointer
  engine.add_module(m)
  engine.finalize_object()
  engine.run_static_constructors()
  funcPtr = engine.get_function_address(kernelFunctionName)
  kernel = ctypes.CFUNCTYPE(None)(funcPtr)

  # Invoke the Kernel
  cudaq.testing.toggleDynamicQubitManagement()
  qubits, context = cudaq.testing.initialize(numQubitsRequired, int(options.shots))
  kernel()
  results = cudaq.testing.finalize(qubits, context)
  print("Dumping results from python fake device!")
  results.dump()
 
  engine.remove_module(m)

  # Open the file in write mode ('w' creates the file if it doesn't exist or overwrites it if it does)
  with open(options.output, "w") as file:
    # Write the string to the file
    file.write(str(results))
